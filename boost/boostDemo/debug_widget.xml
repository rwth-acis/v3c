<?xml version="1.0" encoding="UTF-8" ?>
<Module>
    
    <ModulePrefs title="Boost Debug"
		description="Debug widget which can be used for various purposes."
		author="Team Boost"
		author_email="henm1314g3@dbis.rwth-aachen.de"
		height="400">
  	<Require feature="opensocial-0.8" />
    <Require feature="openapp" />
    <OAuth>
		<Service name="openapp"                     
		    xmlns:openapp="http://www.role-project.eu/xml/openapp/opensocialext/" 
		    openapp:service="http://purl.org/role/terms/spaceService"
		    openapp:permitReadAppend="http://purl.org/role/terms/data">
			
		    <Request method="" url=""/>
			<Authorization url=""/>
			<Access method="" url=""/>
		</Service>
    </OAuth>
    </ModulePrefs>
    
    <Content type="html">
    <![CDATA[

    	<script src="http://virtus-vet.eu/boost/boostDemo/js/jquery-1.10.2.min.js" type="text/javascript"></script>
    	<script src="http://virtus-vet.eu/boost/boostDemo/js/repositories.js" type="text/javascript"></script>
    	<script src="http://virtus-vet.eu/boost/boostDemo/js/ConfigManager.js" type="text/javascript"></script>
    	<script src="http://virtus-vet.eu/boost/boostDemo/js/async.js"></script>
    	<script src="http://virtus-vet.eu/boost/boostDemo/js/boostShared.js" type="text/javascript"></script>
    	<script src="http://virtus-vet.eu/boost/boostDemo/js/BCNManager.js" type="text/javascript"></script>
    	<script src="http://virtus-vet.eu/boost/boostDemo/js/EmployeeManager.js" type="text/javascript"></script>
		<!-- JavaScript Block -->
		<script>
			var space;
			
			gadgets.util.registerOnLoadHandler(init);
			
			function init(){
				
				/*
					Here we get the space resource.
					It is the top level resource which is shared by all users.
				*/
				space = new openapp.oo.Resource(openapp.param.space());
			}

			$(function(){
				$("#deleteAllSpaceResourcesButton").click(function(){
					space.getSubResources({
						relation: openapp.ns.role + "data",
						onEach: function(resource) {
							openapp.resource.del(resource.uri, null);
						}
					});
				});

				$("#updateEmployeesWithLiRelevance").click(function(){
					retrieveAllBcns(space, function(bcns){
						retrieveAllEmployees(space, function(employees){
							for(var i = 0; i < employees.length; i++){
								var employee = employees[i];
								ensureEmplyoeeBCNConsistency(employee, bcns, []);
								employee.update(function(){
									console.log("Updated: " + this.name);
								});
							}
						});
					});
				});

				$("#addExampleData").click(function(){
					var bcns = [];
					var employees = [];
					//Create BCNs
					var bcn1 = new BCN({
						name: "Design Energy-Efficient House",
						description: "This goal has the highest priority. Planning energy efficiency should be done as soon as possible",
						priority: 0
					});
					bcn1.addLI("Ventilation", "Description ventilation");
					bcn1.addLI("Tankless water heaters", "Description tankless water heaters");
					bcn1.addLI("Building materials", "Description building materials");
					bcn1.create(function(){
						bcns.push(bcn1);
						var bcn2 = new BCN({
							name: "Green House Construction",
							description: "Our goal is to reduce energy consumption by implementing energy-savings strategies",
							priority: 1
						});
						bcn2.addLI("Solar electricity", "Description solar electricity");
						bcn2.addLI("Solar heating", "Description solar heating");
						bcn2.create(function(){
							bcns.push(bcn2);

						var bcn3 = new BCN({
							name: "Decor and Furnishing",
							description: "Our goal is to decorate with the costs and energy savings in mind",
							priority: 2
						});
						bcn3.addLI("Led lights", "Description led lights");
						bcn3.addLI("Reflective decorating", "Description reflective decorating");
						bcn3.create(function(){
							bcns.push(bcn3);

							//Create employees
							var employee1 = {};
							employee1.name = "Martin Brown";
							employee1.email = "m.brown@example.com";
							employee1.learningLevels = {};
							employees.push(employee1);

							var employee2 = {};
							employee2.name = "Tina Smith";
							employee2.email = "t.smith@example.com";
							employee2.learningLevels = {};
							employees.push(employee2);

							var employee3 = {};
							employee3.name = "Anssi Costel";
							employee3.email = "a.costel@example.com";
							employee3.learningLevels = {};
							employees.push(employee3);

							var employee4 = {};
							employee4.name = "Patsy Levi";
							employee4.email = "p.levi@example.com";
							employee4.learningLevels = {};
							employees.push(employee4);

							var employee5 = {};
							employee5.name = "Ed Shi";
							employee5.email = "e.shi@example.com";
							employee5.learningLevels = {};
							employees.push(employee5);

							var employee6 = {};
							employee6.name = "Jennifer Carter";
							employee6.email = "j.carter@example.com";
							employee6.learningLevels = {};
							employees.push(employee6);

							var employee7 = {};
							employee7.name = "Roger Midkiff";
							employee7.email = "r.midkiff@example.com";
							employee7.learningLevels = {};
							employees.push(employee7);

							var employee8 = {};
							employee8.name = "Viktor Wilson";
							employee8.email = "v.wilson@example.com";
							employee8.learningLevels = {};
							employees.push(employee8);

							var employee9 = {};
							employee9.name = "Evelyn Sanders";
							employee9.email = "e.sanders@example.com";
							employee9.learningLevels = {};
							employees.push(employee9);

							var employee10 = {};
							employee10.name = "William Mathews";
							employee10.email = "w.mathews@example.com";
							employee10.learningLevels = {};
							employees.push(employee10);

							for(var e = 0; e < employees.length; e++){
								for(var b = 0; b < bcns.length; b++){
									var bcnForEmployee = employees[e].learningLevels[bcns[b].uri] = {};
									bcnForEmployee.isRelevant = true;
									for(var l = 0; l < bcns[b].learningIndicators.length; l++){
										var liForEmployee = bcnForEmployee[bcns[b].learningIndicators[l].id] = {};
										liForEmployee.start = Math.floor((Math.random()*llevel.length));
										liForEmployee.current = liForEmployee.start;
										liForEmployee.isRelevant = true;
										liForEmployee.end = liForEmployee.start +  Math.floor((Math.random()*(llevel.length -liForEmployee.start)));
									}
								}
								saveEmployee(employees[e], space, function(){});
							}

							config = new Config({});
							config.create(function(){});

						});
					});
				});
			});
		});
		</script>

		<!-- HTML Block -->
		<button id="deleteAllSpaceResourcesButton">Delete all space resources</button>
		<button id="addExampleData">Add example data</button>
		<button id="updateEmployeesWithLiRelevance">Update employees for learning indicator relevance</button>
	]]>
  </Content>
</Module>
